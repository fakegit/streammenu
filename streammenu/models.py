from streammenu.conf import streammenuAppConf
from django.db import models
from django.utils.text import slugify
from django.utils.translation import ugettext_lazy as _

from wagtail.wagtailcore import blocks
from wagtail.wagtailcore.fields import StreamField
from wagtail.wagtailadmin.edit_handlers import FieldPanel, StreamFieldPanel

from streammenu import blocks as menu_blocks


menu_blocks = [
    ('custom_link', menu_blocks.CustomLinkBlock()),
    ('page_link', menu_blocks.PageLinkBlock()),
    ('document_link', menu_blocks.DocumentLinkBlock()),
]


class SecondLevelBlock(blocks.StructBlock):
    title = blocks.CharBlock(required=True)
    sub_menu = blocks.StreamBlock(menu_blocks)

    def get_context(self, value, parent_context=None):
        context = super().get_context(value, parent_context=parent_context)
        context['value']['caption'] = value['title']
        return context

    class Meta:
        icon = 'list-ul'
        template = 'streammenu/menu_block.html'


class FirstLevelBlock(blocks.StructBlock):
    title = blocks.CharBlock(required=True)
    sub_menu = blocks.StreamBlock(
        [('second_level_menu', SecondLevelBlock())] + menu_blocks
    )

    def get_context(self, value, parent_context=None):
        context = super().get_context(value, parent_context=parent_context)
        context['value']['caption'] = value['title']
        return context

    class Meta:
        icon = 'list-ul'
        template = 'streammenu/menu_block.html'


class MenuManager(models.Manager):
    pass


class Menu(models.Model):
    site = models.ForeignKey(
        'wagtailcore.Site',
        verbose_name=_('site'),
        db_index=True,
        on_delete=models.CASCADE,
        related_name='menus',
    )
    name = models.CharField(
        verbose_name=_('name'),
        max_length=50,
        help_text=_("For internal reference only."),
    )
    slug = models.SlugField(
        verbose_name=_('slug'),
        allow_unicode=True,
        max_length=100,
        help_text=_(
            "Used to reference this menu in templates etc. Must"
            "be unique for the selected site."
        ),
    )
    body = StreamField(
        [('first_level_menu', SecondLevelBlock())] + menu_blocks
    )

    panels = [
        FieldPanel('site'),
        FieldPanel('name'),
        FieldPanel('slug'),
        StreamFieldPanel('body'),
    ]

    objects = MenuManager()

    def __str__(self):
        return '%s (%s)' % (self.name, self.slug)

    @classmethod
    def get_for_site(cls, slug, site,
                     fall_back_to_default_site_menus=False):
        menu = cls.objects.filter(slug__exact=slug, site=site).first()
        if(menu is None and fall_back_to_default_site_menus and not site.is_default_site):
            return cls.objects.filter(
                slug__exact=slug, site__is_default_site=True
            ).first()
        return menu

    @classmethod
    def _slug_is_available(cls, slug):
        return not cls.objects.filter(slug=slug).exists()

    def _get_autogenerated_slug(self, base_slug):
        candidate_slug = base_slug
        suffix = 1

        while not self._slug_is_available(candidate_slug):
            suffix += 1
            candidate_slug = "%s-%d" % (base_slug, suffix)

        return candidate_slug

    def full_clean(self, *args, **kwargs):
        if not self.slug:
            base_slug = slugify(self.title, allow_unicode=True)
            if base_slug:
                self.slug = self._get_autogenerated_slug(base_slug)

        super().full_clean(*args, **kwargs)

    class Meta:
        verbose_name = _('menu')
        verbose_name_plural = _('menus')
        unique_together = ("site", "slug")
